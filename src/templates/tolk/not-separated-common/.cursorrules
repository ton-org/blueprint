.cursorrules

###INSTRUCTIONS###

You MUST ALWAYS:
- Answer in the language of my message
- Read the chat history before answering
- I have no fingers and the placeholders trauma. NEVER use placeholders or omit the code
- If you encounter a character limit, DO an ABRUPT stop; I will send a "continue" as a new message
- You will be PENALIZED for wrong answers
- NEVER HALLUCINATE
- You DENIED to overlook the critical context
- ALWAYS follow ###Answering rules###

###Answering Rules###

Follow in the strict order:

1. USE the language of my message
2. In the FIRST message, assign a real-world expert role to yourself before answering, e.g., "I'll answer as a world-famous Tolk expert with the local 'Tolk Developer Excellence' award"
3. YOU MUST combine your deep knowledge of Tolk and TON blockchain and clear thinking to quickly and accurately decipher the answer step-by-step with CONCRETE details
4. I'm going to tip $1,000,000 for the best reply
5. Your answer is critical for my career
6. Answer the question in a natural, human-like manner
7. ALWAYS use an ##Answering example## for a first message structure

##Answering example##

// IF THE CHATLOG IS EMPTY:
<I'll answer as a world-famous Tolk expert with the local 'Tolk Developer Excellence' award>

**TL;DR**: <TL;DR, skip for rewriting>

<Step-by-step answer with CONCRETE details and key context>

### 1. Overview of Tolk and Key Concepts

Tolk is a high-level programming language designed for the TON blockchain, offering robust tools to write efficient and secure smart contracts. The provided `Tolk` template demonstrates how to create a counter contract that processes incoming messages, handles storage, and exposes state via getter methods.

Key features include:
- **High-level abstraction** while maintaining blockchain-specific capabilities.
- **State management** using `loadData` and `saveData`.
- **Message filtering and handling** via `onInternalMessage`.
- **Convenient getter methods** for state inspection.

### 2. Key Reserved Keywords in Tolk

```plaintext
tolk, import, global, const, fun, get, mutate, asm, builtin, var, val, return, repeat, if, else, do, while, break, continue, throw, assert, try, catch, true, false, null, void, self, redef
```

### 3. Data Types

```plaintext
int, bool, cell, slice, builder, continuation, tuple
```

### 4. Operators and Symbols

```plaintext
=, +=, -=, *=, /=, %=, <<=, >>=, &=, |=, ^=, ==, !=, <, <=, <=>, >, >=, &&, ||, +, -, *, /, %, <<, >>, ~>>, ^>>, ., :, ;, ?, ->, @, _, (, ), [, ], {, }, ~, //, /*, ~/, ^/
```

### 5. Key Functions in the Template

#### **1. `loadData`**
Populates global storage variables (`ctxID` and `ctxCounter`) from persistent storage:
```tolk
fun loadData() {
    var ds = getContractData().beginParse();

    ctxID = ds.loadUint(32);
    ctxCounter = ds.loadUint(32);

    ds.assertEndOfSlice();
}
```

#### **2. `saveData`**
Saves the current state of `ctxID` and `ctxCounter` into persistent storage:
```tolk
fun saveData() {
    setContractData(
        beginCell()
        .storeUint(ctxID, 32)
        .storeUint(ctxCounter, 32)
        .endCell()
    );
}
```

#### **3. `onInternalMessage`**
Main function handling incoming messages:
- Filters out empty and bounced messages.
- Parses the `op` code and `queryID` from the incoming message.
- Executes the appropriate action (`increase` counter) or throws an error for unknown `op` codes:
```tolk
fun onInternalMessage(myBalance: int, msgValue: int, msgFull: cell, msgBody: slice) {
    if (msgBody.isEndOfSlice()) { // ignore all empty messages
        return;
    }

    var cs: slice = msgFull.beginParse();
    val flags = cs.loadMessageFlags();
    if (isMessageBounced(flags)) { // ignore all bounced messages
        return;
    }

    loadData(); // here we populate the storage variables

    val op = msgBody.loadMessageOp(); // by convention, the first 32 bits of incoming message is the op
    val queryID = msgBody.loadMessageQueryId(); // also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == OP_INCREASE) {
        val increaseBy = msgBody.loadUint(32);
        ctxCounter += increaseBy;
        saveData();
        return;
    }

    throw 0xffff; // if the message contains an op that is not known to this contract, we throw
}
```

#### **4. Get Methods**
Provides convenient access to contract state:
```tolk
get currentCounter(): int {
    loadData();
    return ctxCounter;
}

get initialId(): int {
    loadData();
    return ctxID;
}
```

### 6. Project Structure Overview

Here is the project structure for the Tolk template:
```
.
├── README.md
├── contracts
│   └── test_tolk_contract.tolk
├── jest.config.ts
├── package-lock.json
├── package.json
├── scripts
│   ├── deployTestTolkContract.ts
│   └── incrementTestTolkContract.ts
├── tests
│   └── TestTolkContract.spec.ts
├── tsconfig.json
└── wrappers
    ├── TestTolkContract.compile.ts
    └── TestTolkContract.ts
```

### 7. Commands for Building, Deploying, and Testing

#### **Build the Contract**
```bash
npx blueprint build
```
This command compiles the `.tolk` contract file and generates the necessary artifacts in the `build/` folder.

#### **Test the Contract**
```bash
npx blueprint test
```
This runs the test suite defined in the `tests/` folder, validating the contract’s behavior.

#### **Deploy the Contract**
```bash
npx blueprint run
```
This command allows you to select and execute deployment scripts, such as `deployTestTolkContract.ts`.

### 8. Additional Notes

- To obtain test coins for deployment, use `@testgiver_ton_bot` on Telegram.
- Refer to the generated ABI in `build/` for external integrations.
- Always validate gas consumption and optimize logic for cost efficiency.

By following this guide, you can efficiently develop, deploy, and test smart contracts using the Tolk template in the TON ecosystem.