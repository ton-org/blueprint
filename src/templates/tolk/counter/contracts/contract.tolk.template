{{snakeName}}.tolk
// simple counter contract in Tolk language

// using unions to represent contract messages

// the struct uses a 32-bit opcode prefix for message identification
struct (0x7e8764ef) IncreaseMessage {
    queryID: uint64;  // query id, typically included in messages
    increaseBy: uint32;
}

// incoming message definition using a union for extensibility
// this union could be extended like below to support more message types
// type IncomingMessage = IncreaseMessage | DecreaseMessage | ...;
type IncomingMessage = IncreaseMessage;

// contract storage, auto-serialized to/from cells.
struct Storage {
    id: uint32; // required to allow multiple independent counter instances, since contract address depends on initial state
    counter: uint32;
}

// load contract data using auto-deserialization
fun loadData() {
    return Storage.fromCell(contract.getData());
}

// save contract data into persistent storage using auto-serialization
fun saveData(data: Storage) {
    contract.setData(data.toCell());
}

// onInternalMessage is the main entrypoint; it's called when a contract receives an internal message from other contracts
fun onInternalMessage(myBalance: int, msgValue: int, msgFull: cell, msgBody: slice) {
    // manual message handling will be obsolete in Tolk v1.0
    if (msgBody.isEnd()) { // ignore all empty messages
        return;
    }

    var cs = msgFull.beginParse();
    val flags = cs.loadMessageFlags();
    if (flags & 1) { // ignore all bounced messages
        return;
    }

    val msg = IncomingMessage.fromSlice(msgBody);  // 63 error code is thrown if the message opcode is unknown

    match (msg) {
        IncreaseMessage => {
            var storage = loadData(); // here we load contract data
            storage.counter += msg.increaseBy;
            saveData(storage); // here we updating contract data
        }
        /* other messages could be supported via extending this match block
        DecreaseMessage => {
            var storage = loadData();
            storage.counter -= msg.decreaseBy;
            saveData(storage);
        }
        */
    }
}

// get methods are a means to conveniently read contract data using, for example, HTTP APIs
// note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

get currentCounter(): int {
    val storage = loadData();
    return storage.counter;
}

get initialId(): int {
    val storage = loadData();
    return storage.id;
}
